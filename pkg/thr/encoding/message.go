package encoding

import "encoding/hex"

type Message struct {
	ManufacturerCode [3]byte
	Preamble         [3]byte
	MessageType      byte
	SequenceNum      byte
	Reserved1        [2]byte
	PayloadType      byte
	Payload          []byte
}

func (m *Message) Encode() []byte {
	// standard sysex start
	buff := []byte{msgStart}
	// The manufacturer's code uses the extended 3 byte format.
	buff = append(buff, m.ManufacturerCode[:]...)
	// All messages have this same preamble - is it a device code or something?
	buff = append(buff, m.Preamble[:]...)
	// Commands seems to be prefixed with 00 or 01. see msgType above
	buff = append(buff, m.MessageType)
	// There is a 1 byte sequence that rolls over when at the maximum value
	buff = append(buff, m.SequenceNum)
	// unused(?) the second byte is set to 0x01 in events generated by the amp.
	buff = append(buff, m.Reserved1[:]...)
	// the payload seems to have a type that dictates its length and probably other stuff.
	buff = append(buff, m.PayloadType)
	// The payload is arbitrary bytes
	buff = append(buff, m.Payload...)
	// standard sysex end
	buff = append(buff, msgEnd)
	return buff
}

func (m *Message) Hex() string {
	return hex.EncodeToString(m.Encode())
}
