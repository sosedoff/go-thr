package sysex

import (
	"encoding/hex"
	"fmt"
	"github.com/rakyll/portmidi"
	"time"
)

const msgStart = 0xf0
const msgEnd = 0xf7

func yamahaManufacturerCode() []byte {
	// manufacturer ID 0x00 indicates a 3 byte ID
	return []byte{0x00, 0x01, 0x0C}
}

// mystery stuff that gets send with every command
func preamble() []byte {
	return []byte{0x22, 0x02, 0x4d}
}

type MultiCommand struct {
	Cmds []*Commmand
}

func (c *MultiCommand) Send(out *portmidi.Stream) error {
	for i, cm := range c.Cmds {
		if err := out.WriteSysExBytes(portmidi.Time(), cm.Bytes()); err != nil {
			return fmt.Errorf("multicommand write failed at cmd %d: %s", i, err.Error())
		}
		time.Sleep(time.Millisecond)
	}
	return nil
}

type Commmand struct {
	Payload []byte
}

func (c *Commmand) Bytes() []byte {
	buff := []byte{msgStart}
	buff = append(buff, yamahaManufacturerCode()...)
	buff = append(buff, preamble()...)
	buff = append(buff, c.Payload...)
	buff = append(buff, msgEnd)
	return buff
}

func (c *Commmand) String() string {
	return hex.Dump(c.Bytes())
}

func (c *Commmand) Send(out *portmidi.Stream) error {
	return out.WriteSysExBytes(portmidi.Time(), c.Bytes())
}

func (c *Commmand) Receive(events []portmidi.Event) bool {
	return false
}

// Command that will tell the amp to send events back to the host whenever a control is changed on the
// physical amp.
var EnableEvents = MultiCommand{
	Cmds: []*Commmand{
		{Payload: []byte{0x4d, 0x00, 0x01, 0x00, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{Payload: []byte{0x00, 0x02, 0x00, 0x00, 0x03, 0x28, 0x24, 0x6b, 0x09, 0x18, 0x00, 00, 0x00}},
	},
}

var SelectChannelTwo = MultiCommand{
	Cmds: []*Commmand{
		//Payload: []byte{0x00, 0x0b, 0x00, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		//{Payload: []byte{0x00, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{Payload: []byte{0x01, 0x0a, 0x00, 0x00, 0x0b, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00}},
		//{Payload: []byte{0x00, 0x0d, 0x00, 0x00, 0x07, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		//{Payload: []byte{0x01, 0x0b, 0x00, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x3c, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00}},
	},
}
